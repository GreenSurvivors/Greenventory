package de.minebench.syncinv.messenger;

import org.bukkit.util.io.BukkitObjectOutputStream;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

/*
 * Copyright 2017 Phoenix616 All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation,  version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
public class Message {

    private MessageType type;
    private List<Object> data;

    /**
     * A Message of a certain type. Optionally with some data
     * @param type      The type of the message
     * @param objects   The data, in the order that it should be send
     */
    public Message(MessageType type, Object... objects) {
        this.type = type;
        data = new ArrayList<>(Arrays.asList(objects));
    }

    public MessageType getType() {
        return type;
    }

    public Message add(Object o) {
        data.add(o);
        return this;
    }

    /**
     * Generate a byte array out of the data of this message
     * @param sender    The name of the sender
     * @return          The generated byte array (starts with the sender,
     *                  then continues with the type and the data);
     *                  an empty one if an error occurred
     */
    public byte[] toByteArray(String sender) {
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
             ObjectOutput out = new BukkitObjectOutputStream(bos)) {
            out.writeUTF(sender);
            out.writeUTF(type.toString());
            for (Object o : data) {
                if (o instanceof String || o instanceof UUID) {
                    out.writeUTF(o.toString());
                } else if (o instanceof Boolean) {
                    out.writeBoolean((Boolean) o);
                } else if (o instanceof Byte) {
                    out.writeByte((Byte) o);
                } else if (o instanceof Short) {
                    out.writeShort((Short) o);
                } else if (o instanceof Integer) {
                    out.writeInt((Integer) o);
                } else if (o instanceof Long) {
                    out.writeLong((Long) o);
                } else if (o instanceof Float) {
                    out.writeFloat((Float) o);
                } else if (o instanceof Double) {
                    out.writeDouble((Double) o);
                } else {
                    out.writeObject(o);
                }
            }
            return bos.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new byte[0];
    }
}
